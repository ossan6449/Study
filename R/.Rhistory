high
low
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL
low <- NULL
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,]):
    } else {
        low <- rbind(low, kisyou.dat[i,]):
    } 
}
high
low
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL
low <- NULL
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,])
    } else {
        low <- rbind(low, kisyou.dat[i,])
    } 
}
high
low
nrow(high)
nrow(low)
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL # 現地気圧が1000以上のデータの格納用
low <- NULL  # 現地気圧が1000未満のデータの格納用
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,])
    } else {
        low <- rbind(low, kisyou.dat[i,])
    } 
}
# 現地気圧が1000以上のデータ確認
high
nrow(high) # 行数確認
# 現地気圧が1000未満のデータ確認
low
nrow(low) # 行数確認
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2])
hist(low[,2])
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],main="現地気圧が1000以上のデータの相対湿度")
hist(low[,2],main="現地気圧が1000未満のデータの相対湿度")
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",main="現地気圧が1000未満")
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# low
low
plot(low[,8], low[,2])
plot(high[,8], high[,2])
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
plot(high[,8], high[,2],xlab="相対湿度",ylab="現地気圧",main="現地気圧が1000以上")
plot(low[,8], low[,2],xlab="相対湿度",ylab="現地気圧",main="現地気圧が1000未満")
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
plot(high[,8], high[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000以上")
plot(low[,8], low[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000未満")
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
# (3)「相対湿度=a+b*現地気圧」のモデルを推定し、(2)の散布図の上に重ね描き
# 現地気圧が1000以上のデータ
plot(high[,8], high[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000以上")
est.high <- lsfit(high[,8],high[,2])
abline(est.high, lwd=c(2),col="blue")
# 現地気圧が1000未満のデータ
plot(low[,8], low[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000未満")
est.low <- lsfit(low[,8],low[,2])
abline(est.low, lwd=c(2),col="blue")
10単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# (1)現地気圧,相対湿度で散布図を作成
kiatsu <- kisyou.dat[,8]
sitsudo <- kisyou.dat[,2]
plot(kiatsu, sitsudo, xlab="気圧(hPa)", ylab="湿度(%)")
# (2)lsfit()で推定された直線をabline()で描く(現地気圧,相対湿度）
est <- lsfit(kiatsu,sitsudo)
abline(est, lwd=c(2),col="blue")
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL # 現地気圧が1000以上のデータの格納用
low <- NULL  # 現地気圧が1000未満のデータの格納用
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,])
    } else {
        low <- rbind(low, kisyou.dat[i,])
    } 
}
# 現地気圧が1000以上のデータ確認
high
nrow(high) # 行数確認
# 現地気圧が1000未満のデータ確認
low
nrow(low) # 行数確認
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
# (3)「相対湿度=a+b*現地気圧」のモデルを推定し、(2)の散布図の上に重ね描き
# 現地気圧が1000以上のデータ
plot(high[,8], high[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000以上")
est.high <- lsfit(high[,8],high[,2])
abline(est.high, lwd=c(2),col="blue")
# 現地気圧が1000未満のデータ
plot(low[,8], low[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000未満")
est.low <- lsfit(low[,8],low[,2])
abline(est.low, lwd=c(2),col="blue")
# 10単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# (1)現地気圧,相対湿度で散布図を作成
kiatsu <- kisyou.dat[,8]
sitsudo <- kisyou.dat[,2]
plot(kiatsu, sitsudo, xlab="気圧(hPa)", ylab="湿度(%)")
# (2)lsfit()で推定された直線をabline()で描く(現地気圧,相対湿度）
est <- lsfit(kiatsu,sitsudo)
abline(est, lwd=c(2),col="blue")
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL # 現地気圧が1000以上のデータの格納用
low <- NULL  # 現地気圧が1000未満のデータの格納用
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,])
    } else {
        low <- rbind(low, kisyou.dat[i,])
    } 
}
# 現地気圧が1000以上のデータ確認
high
nrow(high) # 行数確認
# 現地気圧が1000未満のデータ確認
low
nrow(low) # 行数確認
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
# (3)「相対湿度=a+b*現地気圧」のモデルを推定し、(2)の散布図の上に重ね描き
# 現地気圧が1000以上のデータ
plot(high[,8], high[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000以上")
est.high <- lsfit(high[,8],high[,2])
abline(est.high, lwd=c(2),col="blue")
# 現地気圧が1000未満のデータ
plot(low[,8], low[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000未満")
est.low <- lsfit(low[,8],low[,2])
abline(est.low, lwd=c(2),col="blue")
# 10単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# (1)現地気圧,相対湿度で散布図を作成
kiatsu <- kisyou.dat[,8]
sitsudo <- kisyou.dat[,2]
plot(kiatsu, sitsudo, xlab="気圧(hPa)", ylab="湿度(%)")
# (2)lsfit()で推定された直線をabline()で描く(現地気圧,相対湿度）
est <- lsfit(kiatsu,sitsudo)
abline(est, lwd=c(2),col="blue")
# 課題2
# 現地気圧が1000以上のデータとそれ以外のデータに分類し、2つの行列を作成
high <- NULL # 現地気圧が1000以上のデータの格納用
low <- NULL  # 現地気圧が1000未満のデータの格納用
for (i in 1:600){
    if (kisyou.dat[i,8] >= 1000){
        high <- rbind(high, kisyou.dat[i,])
    } else {
        low <- rbind(low, kisyou.dat[i,])
    } 
}
# 行数確認
nrow(high)
nrow(low)
# 課題3
# 画面を2行2列に分割
par(mfrow=c(2,2))
# (1)相対湿度のヒストグラムの描画
hist(high[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000以上")
hist(low[,2],xlab="相対湿度",ylab="頻度",main="現地気圧が1000未満")
# (2)現地気圧を横軸、相対湿度を縦軸に散布図を描画
# (3)「相対湿度=a+b*現地気圧」のモデルを推定し、(2)の散布図の上に重ね描き
# 現地気圧が1000以上のデータ
plot(high[,8], high[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000以上")
est.high <- lsfit(high[,8],high[,2])
abline(est.high, lwd=c(2),col="blue")
# 現地気圧が1000未満のデータ
plot(low[,8], low[,2],xlab="現地気圧",ylab="相対湿度",main="現地気圧が1000未満")
est.low <- lsfit(low[,8],low[,2])
abline(est.low, lwd=c(2),col="blue")
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 風速列を取得
wspeed <- kisyou.dat[,5]
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF, lag.max=50)
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
# 風速の自己相関係数を推定（時間遅れ最大50時間）
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF, lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
# 風速の自己相関係数を推定（時間遅れ最大50時間）
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
# 風速の自己相関係数を推定（時間遅れ最大50時間）
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF")
# 課題2
# 画面を2行2列に分割
par(mfrow=c(2,2))
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag)
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF"0)
# 課題2
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF")
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
# 風速の自己相関係数を推定（時間遅れ最大50時間）
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
# 11単元
# CSV読込&データ確認
kisyou.dat <- read.csv("E:/til/R/177042805.csv")
kisyou.dat
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 課題1
# 風速の時系列データを取得
wspeed <- kisyou.dat[1:600,5]
# 風速の自己相関係数を推定（時間遅れ最大50時間）
acf(wspeed, xlab="時間遅れ(時間)", main="自己相関関数", col="blue", lag.max=50)
# 課題2
# 現地気圧の時系列データを取得
kiatsu <- kisyou.dat[1:600,8]
# 現地気圧と風速の自相互相関係数を推定（時間遅れ最大50時間）
ccf(kiatsu, wspeed, col="purple", lwd=c(2), xlab="時間遅れ(時間)", ylab="CCF", lag.max=50)
save.image("E:\\til\\R\\lesson.RData")
# 12単元
# CSV読込&データ確認
tyoui.tmp <- read.csv("E:/til/R/177042806.csv")
tyoui <- tyoui.tmp[,1]
tyoui
tyoui.tmp
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
plot(tyoui[1:100,],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
res <- spectrum(tyoui, method="pgram",spans=3)
res <- spectrum(tyoui, method="pgram",spans=3)
res$spec
res$freq
max(res$spec)
wiche.max(res$spec)
wich.max(res$spec)
which.max(res$spec)
res$fraq[60]
res$fraq[:60]
res$fraq[60,]
res$fraq[1]
res$freq[1]
res$freq[60]
res$freq[32]
res$spec[32]
res$spec[31]
res$spec[60]
res$spec[32]
res$spec[0]
res$spec[30]
res$spec[32]
res$spec[31]
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
# 1つめ峰の値
res$spec[31]
res$freq[31]
# 2つめ峰の値
res$spec[60]
res$freq[60]
res <- spectrum(tyoui, method="pgram",spans=3)
res
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
res
sort(res, decreasing = TRUE)
a <- sort(res, decreasing=TRUE)
sort(c(res), decreasing = TRUE)
sort(c(res$spec), decreasing=TRUE)
res$spec
2.067260e+04# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
# 最大値
res$spec[60]
res$freq[60]
# 2番目
res$spec[61]
res$freq[61]
# 3番目
res$spec[62]
res$freq[62]
res$spec
round(res$freq[60],3)
round(res$freq[61],3)
round(res$freq[62],3)
# 12単元
# CSV読込&データ確認
tyoui.tmp <- read.csv("E:/til/R/177042806.csv")
tyoui <- tyoui.tmp[,1]
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
# 最大値：3774570e+04
# 2番目に大きな値：3713049e+04
# 3番目に大きな値：2067260e+04
# 課題3
# 最大値：3774570e+04
round(res$freq[60],3) #該当する周波数を小数点第三位まで表示
# 2番目に大きな値：3713049e+04
round(res$freq[61],3) #該当する周波数を小数点第三位まで表示
# 3番目に大きな値：2067260e+04
round(res$freq[62],3) #該当する周波数を小数点第三位まで表示
# 12単元
# CSV読込&データ確認
tyoui.tmp <- read.csv("E:/til/R/177042806.csv")
tyoui <- tyoui.tmp[,1]
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
# 最大値：3774570e+04
# 2番目に大きな値：3713049e+04
# 3番目に大きな値：2067260e+04
# 課題3
# 最大値：3774570e+04
round(res$freq[60],3) #該当する周波数を小数点第三位まで表示
# 2番目に大きな値：3713049e+04
round(res$freq[61],3) #該当する周波数を小数点第三位まで表示
# 3番目に大きな値：2067260e+04
round(res$freq[62],3) #該当する周波数を小数点第三位まで表示
res$spec[4]
res$spec[31]
res$spec[60]
# 12単元
# CSV読込&データ確認
tyoui.tmp <- read.csv("E:/til/R/177042806.csv")
tyoui <- tyoui.tmp[,1]
# 課題1
# 画面を2行1列に分割
par(mfrow=c(2,1))
# 折線グラフ 全件
plot(tyoui,type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(全件)")
# 折線グラフ 100時間まで
plot(tyoui[1:100],type="l",xlab="時間(時)",ylab="潮位(cm)",main="潮位(100時間まで)")
# 課題2
# ピリオドグラムを用いて全てのデータ基づいてスペクトル密度関数を推定
res <- spectrum(tyoui, method="pgram",spans=3)
# 課題3
# 最大値
round(res$freq[60],3) #該当する周波数を小数点第三位まで表示
# 2番目に大きな値
round(res$freq[31],3) #該当する周波数を小数点第三位まで表示
# 3番目に大きな値
round(res$freq[4],3) #該当する周波数を小数点第三位まで表示
1/spec.est$freq[c(4, 31, 60)]
q()
